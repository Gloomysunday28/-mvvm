(function (global) {
    function Watcher() {
        this.listener = { text: [], node: [] };
        this.repeat = {};
        this.arr = [];
    }

    Watcher.prototype = {
        constructor: Watcher,
        update(key, value) {
            // console.log(this.listener)
            Object.keys(this.listener).map(ext => {
                this.listener[ext].map((obj, index) => {
                    if (obj.name === key) {
                        obj.fn(obj.el, obj.owner, index, value)
                    }
                })
            })
        },
        // arrrepeat(){
        //     this.listener.map(val=>{
        //         var text = val.name+val.type;
        //         if(!this.repeat[text]){
        //             this.arr.push(val)
        //             this.repeat[text] = 1;
        //         }
        //     })
        //     this.listener = [...this.arr];  //订阅者去重
        // },
        addObserve(key, type, fnname, value, el, owner, cb) {
            var obj = {
                name: key,
                type,
                fn: fnname,
                value,
                el,
                owner
            }
            if (type === 'text') {
                this.listener.text.push(obj)
            } else if (type === 'node') {
                this.listener.node.push(obj) //添加订阅者
            }

            cb && cb(obj) //返回视图constroll做处理
        }
    }

    var watcher = new Watcher();
    var arrObj = [];
    function Constroller(option) {
        this.owner = option;
        if (option.el.nodeType === 1) {
            this.el = option.el;
        } else {
            this.el = document.getElementById(option.el.slice(1))
        }
        this.childNodes = this.arrays(this.el.childNodes); //遍历所有的子节点
        this.data = option.data;
    }

    Constroller.prototype = {
        constructor: Constroller,
        init() {
            this.analysis(this.childNodes); //初始化视图
        },
        render() {
            var fragement = document.createDocumentFragment();
            this.childNodes.map(el => {
                fragement.appendChild(el)
            })
            this.el.appendChild(fragement);
        },
        analysis(al) {
            al.map(el => {
                switch (el.nodeType) { //根据nodetype来选用不同方法渲染
                    case 1:
                        this.analysis(this.arrays(el.childNodes))
                        this.nodealaysis(el, this);
                        break;
                    case 3:
                        this.textalaysis(el, this)
                        break;
                    default:
                        break;
                }
            })
        },
        nodealaysis(el, self) { //节点上的属性渲染
            var attr = Array.prototype.slice.call(el.attributes);
            attr.map(val => {
                var name = val.name;

                if (name.startsWith('v-bind:') || name.startsWith(':')) {
                    var key = name.slice(name.indexOf(':') + 1)
                    el.removeAttribute(name)
                    el.setAttribute(key, self[key])
                    if (!el.getAttribute('data-flag')) {
                        watcher.addObserve(key, 'node', self.nodealaysis, self[val], el, self.owner)
                    }
                    el.setAttribute('data-flag', true)
                }
            })
        },
        findEvery(str, cha) { //找到模板渲染的位置 以便下次改动数据后可识别位置
            var arr = [];
            var x = str.indexOf(cha);
            arr.push(x)
            for (var i = 0; i < Math.ceil(str.length / cha.length + 1); i++) {
                x = str.indexOf(cha, x + 1);
                arr.push(x)
            }
            return arr
        },
        textalaysis(txt, self, index, value) {//节点内容的属性渲染

            if (txt.nodeValue !== "undefined") {
                var text = txt.nodeValue.replace(/\{\{/ig, '=').replace(/\}\}/ig, '=').replace('==', '=').trim();
                if (text.startsWith('=')) {
                    text = text.slice(1)
                }
                if (text.endsWith('=')) {
                    text = text.slice(0, text.length - 1)
                }

                var textnext = '';
                if (text.split('=')[0] !== "") {
                    text.split('=').map(val => {
                        if (textnext === '') {
                            textnext = text.replace(/\=/g, '');
                        }

                        if (self.data[val]) {
                            var lengthstart = self.findEvery(text, val);
                            txt.nodeValue = textnext.replace(new RegExp(val, 'g'), self.data[val]);
                            textnext = txt.nodeValue;
                            watcher.addObserve(val, 'text', self.textalaysis, self.data[val], txt, self.owner, function (data) {
                                arrObj.push(data)
                            })

                        } else {
                            if (arrObj.length > 0 && arrObj[index]) {
                                setTimeout(() => {
                                    txt.nodeValue = txt.nodeValue.replace(new RegExp(arrObj[index].value, 'g'), self[arrObj[index].name]);
                                    arrObj[index].value = self[arrObj[index].name];
                                }, 0)
                            }
                        }
                    })
                }
            }
        },
        arrays(el, index) {
            return Array.prototype.slice.call(el, index === undefined ? 0 : index);
        }
    }

    global.Constroller = Constroller



    function observe(owner, obj) {
        if (typeof obj !== 'object') {
            return;
        }

        Object.keys(obj).map((key) => {
            observer(owner, obj, key, obj[key])
        })
    }

    function observer(owner, data, key, val) {
        observe(val);//如果val是对象
        Object.defineProperty(owner, key, {
            enumerable: true,//可枚举 
            configurable: true,//可删除
            get: function () {
                return val;
            },
            set: function (newval) {
                if (val !== newval) {
                    watcher.update(key, newval) //通知订阅者vm去通知视图更新
                }
                val = newval;
                return val;
            }
        })
    }


    function Mvvm(option) {
        // console.log(option)
        Object.keys(option.data).map(val => {
            option[val] = option.data[val]
        })
        this.observe = observe(option, option.data)
        this.constroller = new Constroller(option)
        this.constroller.init();
        window.onload = function () {
            option.mounted();
        }
    }

    global.Mvvm = Mvvm;
})(window)
